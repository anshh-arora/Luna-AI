index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Robert AI</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="stylesheet" href="/static/css/styles.css">
</head>
<body>
    <div class="app-container">
        <div class="sidebar">
            <div class="sidebar-header">
                <button class="new-chat-btn">
                    <i class="fas fa-plus"></i>
                    <span>New Chat</span>
                </button>
            </div>
            <nav class="chat-history">
                <div class="chat-history-section">
                    <h3>Today</h3>
                    <ul id="chat-list">
                        <!-- Dynamically populated chat history -->
                    </ul>
                </div>
            </nav>
            <div class="sidebar-footer">
                <h5>{{ email }}</h5>
                 
                    <div class="sign_out">
                        <a href="{{ url_for('logout') }}" class="logout-button">Sign Out<i class='bx bx-log-out-circle'></i></a>
                    </div>
                    
                    
                
            </div>
        </div>

        <main class="chat-container">
            <header class="chat-header">
                <div class="chat-header-title">
                    <h2>Robert AI</h2>
                    <p>Language Learning Assistant</p>
                </div>
                <div class="header-actions">
                    <button class="action-btn">
                        <i class="fas fa-info-circle"></i>
                    </button>
                </div>
            </header>

            <div class="chat-messages" id="chat-messages">
                <div class="welcome-message">
                    <h3>Welcome to Robert AI</h3>
                    <p>How can I help you learn a language today?</p>
                </div>
            </div>

            <div class="chat-input-area">
                <div class="input-container">
                    <textarea 
                        id="chat-input" 
                        placeholder="Type your message..." 
                        rows="1"
                    ></textarea>
                    <button id="send-btn" class="send-button">
                        <i class="fas fa-paper-plane"></i>
                </div>
                <div class="input-hints">
                </div>
            </div>
        </main>
    </div>
    <script src="/static/js/scripts.js"></script>
</body>
</html>

styles.css
:root {
    --bg-primary: #343541;
    --bg-secondary: #202123;
    --text-primary: #FFFFFF;
    --text-secondary: #8E8E8E;
    --accent-color: #19C37D;
    --border-color: #2C2C2C;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Inter', sans-serif;
    background-color: var(--bg-primary);
    color: var(--text-primary);
    line-height: 1.6;
}

.app-container {
    display: flex;
    height: 100vh;
    max-width: 1920px;
    margin: 0 auto;
}

.sidebar {
    width: 260px;
    background-color: var(--bg-secondary);
    border-right: 1px solid var(--border-color);
    display: flex;
    flex-direction: column;
}

.sidebar-header {
    padding: 20px;
    border-bottom: 1px solid var(--border-color);
}

.new-chat-btn {
    width: 100%;
    background-color: var(--accent-color);
    color: white;
    border: none;
    padding: 10px;
    border-radius: 5px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    cursor: pointer;
}

.chat-history {
    flex-grow: 1;
    overflow-y: auto;
    padding: 10px;
}

.chat-history-section h3 {
    color: var(--text-secondary);
    margin-bottom: 10px;
    font-size: 12px;
}

.chat-history-item {
    display: flex;
    align-items: center;
    gap: 10px;
    padding: 10px;
    border-radius: 5px;
    cursor: pointer;
}

.chat-history-item.active,
.chat-history-item:hover {
    background-color: rgba(255, 255, 255, 0.1);
}

.sidebar-footer {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 15px;
    border-top: 1px solid var(--border-color);
}

.sidebar-footer.sign_out{
    color: blue;
    #aduct sign out button in index.thml file
}
.user-info {
    display: flex;
    align-items: center;
    gap: 10px;
}

.user-avatar {
    width: 30px;
    height: 30px;
    border-radius: 50%;
}

.settings-btn {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
}

.chat-container {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
}

.chat-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 15px 20px;
    border-bottom: 1px solid var(--border-color);
}

.chat-header-title h2 {
    font-size: 18px;
}

.chat-header-title p {
    color: var(--text-secondary);
    font-size: 12px;
}

.header-actions {
    display: flex;
    gap: 10px;
}

.action-btn {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
}

.chat-messages {
    flex-grow: 1;
    overflow-y: auto;
    padding: 20px;
}

.welcome-message {
    text-align: center;
    color: var(--text-secondary);
    margin-top: 50px;
}

.chat-input-area {
    padding: 15px 20px;
    border-top: 1px solid var(--border-color);
}

.input-container {
    display: flex;
    align-items: center;
    background-color: #40414F;
    border-radius: 8px;
    padding: 10px;
    margin-bottom: 10px;
}

#chat-input {
    flex-grow: 1;
    background: transparent;
    border: none;
    color: var(--text-primary);
    resize: none;
    max-height: 200px;
    outline: none;
}

.send-button {
    background-color: var(--accent-color);
    color: white;
    border: none;
    padding: 8px 12px;
    border-radius: 5px;
    margin-left: 10px;
    cursor: pointer;
}

.input-hints {
    display: flex;
    justify-content: center;
    gap: 10px;
    color: var(--text-secondary);
    font-size: 12px;
}

/* Scrollbar Styling */
::-webkit-scrollbar {
    width: 8px;
}

::-webkit-scrollbar-track {
    background: var(--bg-secondary);
}

::-webkit-scrollbar-thumb {
    background: var(--text-secondary);
    border-radius: 4px;
}

/* Existing styles remain the same, add these new styles */
.message {
    display: flex;
    gap: 10%;
    margin-bottom: 15px;
    max-width: 80%;
}

.message-user {
    align-self: flex-end;
    margin-left: auto;
    float: right;
    
}

.message-ai {
    align-self: flex-start;
    margin-right: auto;
    float: left;
}

.message-avatar {
    margin: 0 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: var(--bg-secondary);
}
.message.message-loading{
    display: none;
}

.message-content {
    background-color: var(--bg-secondary);
    padding: 10px;
    border-radius: 10px;
    max-width: 70%;
    text-align: right;
    width: auto;
    white-space: pre-wrap;
}

.message-user .message-content {
    background-color: var(--accent-color);
    color: white;
}

.mic-button, .mic-btn {
    background-color: transparent;
    color: var(--text-secondary);
    border: none;
    cursor: pointer;
    margin-left: 10px;
}

.mic-button.active, .mic-btn.active {
    color: var(--accent-color);
}

scripts.js
document.addEventListener('DOMContentLoaded', () => {
    const chatMessages = document.getElementById('chat-messages');
    const chatInput = document.getElementById('chat-input');
    const sendBtn = document.getElementById('send-btn');
    const micBtn = document.getElementById('mic-btn');
    const newChatBtn = document.querySelector('.new-chat-btn');

    let currentConversationId = null;

    // Initialize new conversation on page load
    initializeConversation();

    function initializeConversation() {
        fetch('/new-conversation', { method: 'POST' })
            .then(response => response.json())
            .then(data => {
                currentConversationId = data.conversationId;
            });
    }

    // Auto-resize textarea
    chatInput.addEventListener('input', function() {
        this.style.height = 'auto';
        this.style.height = `${this.scrollHeight}px`;
    });

    // Send message events
    sendBtn.addEventListener('click', () => sendMessage(chatInput.value));
    chatInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage(chatInput.value);
        }
    });

    // New chat button
    newChatBtn.addEventListener('click', () => {
        chatMessages.innerHTML = `
            <div class="welcome-message">
                <h3>New Language Learning Session</h3>
                <p>Ready to improve your language skills?</p>
            </div>
        `;
        initializeConversation();
    });

    // Speech Recognition
    if ('webkitSpeechRecognition' in window) {
        const recognition = new webkitSpeechRecognition();
        recognition.continuous = false;
        recognition.interimResults = false;
        recognition.lang = 'en-US';

        micBtn.addEventListener('click', () => {
            recognition.start();
            micBtn.classList.add('active');
        });

        recognition.onresult = (event) => {
            const transcript = event.results[0][0].transcript;
            chatInput.value = transcript;
            micBtn.classList.remove('active');
            sendMessage(transcript);
        };

        recognition.onerror = () => {
            micBtn.classList.remove('active');
        };
    } else {
        micBtn.style.display = 'none';
    }

    function sendMessage(message) {
        message = message.trim();
        if (!message) return;

        // Remove welcome message
        const welcomeMessage = document.querySelector('.welcome-message');
        if (welcomeMessage) welcomeMessage.remove();

        // Create and append user message
        const userMessageEl = createMessageElement('user', message);
        chatMessages.appendChild(userMessageEl);
        chatInput.value = '';
        chatInput.style.height = 'auto';

        // Show loading
        const loadingEl = createLoadingIndicator();
        chatMessages.appendChild(loadingEl);

        // Send message to backend
        fetch('/query', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                question: message,
                conversationId: currentConversationId
            })
        })
        .then(response => response.json())
        .then(data => {
            // Remove loading
            chatMessages.removeChild(loadingEl);

            // Handle multiple responses
            data.response.forEach((response, index) => {
                setTimeout(() => {
                    const aiMessageEl = createMessageElement('ai', response);
                    chatMessages.appendChild(aiMessageEl);
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }, index * 600);
            });

            // Play audio if available
            if (data.audio_url) {
                const audioEl = new Audio(data.audio_url);
                audioEl.play().catch(console.warn);
            }
        })
        .catch(error => {
            console.error('Message send error:', error);
            const errorMessageEl = createMessageElement('ai', 'Oops! Something went wrong.');
            chatMessages.appendChild(errorMessageEl);
        });

        // Scroll to bottom
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function createMessageElement(sender, message) {
        const messageEl = document.createElement('div');
        messageEl.classList.add('message', `message-${sender}`);
        
        const avatarEl = document.createElement('div');
        avatarEl.classList.add('message-avatar');
        avatarEl.innerHTML = sender === 'user' 
            ? '<i class="fas fa-user"></i>' 
            : '<i class="fas fa-robot"></i>';

        const contentEl = document.createElement('div');
        contentEl.classList.add('message-content');
        contentEl.textContent = message;

        messageEl.appendChild(avatarEl);
        messageEl.appendChild(contentEl);

        return messageEl;
    }

    function createLoadingIndicator() {
        const loadingEl = document.createElement('div');
        loadingEl.classList.add('message', 'message-loading');
        loadingEl.innerHTML = `
            <div class="message-avatar">
                <i class="fas fa-robot"></i>
            </div>
            <div class="message-content">
                <div class="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
        `;
        return loadingEl;
    }
});

app.py
from flask import Flask, render_template, request, redirect, url_for, session, jsonify
from flask_pymongo import PyMongo
from flask_bcrypt import Bcrypt
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from dotenv import load_dotenv
from groq import Groq
import os
import uuid

# Load environment variables
load_dotenv()

# Flask App Initialization
app = Flask(__name__, static_folder="static", template_folder="templates")
app.config["MONGO_URI"] = os.getenv("MONGO_URI")
app.config["SECRET_KEY"] = os.getenv("SECRET_KEY")

# MongoDB and Bcrypt Setup
mongo = PyMongo(app)
bcrypt = Bcrypt(app)

# Flask-Login Setup
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = "login"

# Groq API Configuration
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
client = Groq(api_key=GROQ_API_KEY)
MODEL = "llama3-70b-8192"
BASE_PROMPT = "You are a helpful AI assistant. Answer the user's queries concisely and informatively."

# MongoDB Collection
users_collection = mongo.db.login_details


class User(UserMixin):
    """User class for Flask-Login."""
    def __init__(self, id, name, email):
        self.id = id
        self.name = name
        self.email = email


@login_manager.user_loader
def load_user(user_id):
    """Load user by ID."""
    user_data = users_collection.find_one({"_id": user_id})
    if user_data:
        return User(id=user_data["_id"], name=user_data["name"], email=user_data["email"])
    return None


@app.route("/")
@login_required
def home():
    """Home route."""
    return render_template("index.html", email=current_user.email)


@app.route("/login", methods=["GET", "POST"])
def login():
    """Login route."""
    if request.method == "POST":
        email = request.form.get("email")
        password = request.form.get("password")
        user_data = users_collection.find_one({"email": email})

        if user_data and bcrypt.check_password_hash(user_data["password"], password):
            user = User(id=user_data["_id"], name=user_data["name"], email=user_data["email"])
            login_user(user)
            session["user_id"] = user.id
            return redirect(url_for("home"))
        return render_template("login.html", error="Invalid credentials")

    return render_template("login.html")


@app.route("/register", methods=["GET", "POST"])
def register():
    """Register route."""
    if request.method == "POST":
        name = request.form.get("name")
        email = request.form.get("email")
        password = request.form.get("password")
        mobile = request.form.get("mobile")

        if users_collection.find_one({"email": email}):
            return render_template("register.html", error="Email already registered")

        hashed_password = bcrypt.generate_password_hash(password).decode("utf-8")
        new_user = {
            "_id": str(uuid.uuid4()),
            "name": name,
            "email": email,
            "password": hashed_password,
            "mobile": mobile,
        }
        users_collection.insert_one(new_user)
        return redirect(url_for("login"))

    return render_template("register.html")


@app.route("/logout")
@login_required
def logout():
    """Logout route."""
    logout_user()
    session.pop("user_id", None)
    return redirect(url_for("login"))


#taking base prompt file
def base_prompt(file):
    with open("base_prompt.txt", "rb"):
        base_prompt

#chat with groq
def chat_with_groq(base_prompt,user_query):
    try:
        completion = client.chat.completions.create(
            model = MODEL,
            messages=[{"role": "system", "content": base_prompt},
            {"role":"user","content":user_query},],
            temperature=0.1,

        )
        return completion.choices[0].message.content.strip()
    except Exception as e:
        return f"I'm experiencing a communication challenge. Could you retry? Error: {str(e)}"


@app.route("/chat", methods=["POST"])
@login_required
def chat():
    """Chat route."""
    user_query = request.json.get("query", "").strip()
    if not user_query:
        return jsonify({"error": "Query cannot be empty"}), 400

    response = chat_with_groq(user_query)
    return jsonify({"response": response})

#handel user query
def handel_user_query(user_query,base_prompt):
    user_query = request.json.get("query", "").strip()
    if not user_query:
        return jsonify({"error": "Query cannot be empty"}), 400
    
    response = chat_with_groq(user_query)
    return jsonify({"response": response})



if __name__ == "__main__":
    app.run(debug=True)
